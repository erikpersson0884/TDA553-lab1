1. Explain how you chose the inheritance hierarchy in Task 1, making reference to the Open-Closed Principle.

In the original version we chose to have a Car superclass. Then the subclasses, Volvo240 and Saab95 inherits from Car as they share similar
attributes and methods. We also added an abstract Positionable class which Car inherits from since more than just cars could have
coordinates and a direction. 
However after the feedback we changed to instead have multiple interfaces which Saab95 and Volvo240 implements
and delegates either a trimcar or a turbocar class in order to do this. In this design trimcar and turbocar is subclasses of the Car class. 

Since the methods used to change the speed varied between the two classes, we decided to make them as abstract methods which we
then override in each subclass. 

This follows the Open-Closed Principle since we have not changed the functionality and developed it in a future-compatible way
because you can added more cars easily for instance. 


2. Explain how you implemented each of the sanity checks in Task 4.
- gas() and brake() only accept values in the interval [0,1],
To implement this we made an if statement in the method gas that checked if "amount" was in the allowed interval, 
if it was not we throw an exception

- currentSpeed always lies in the interval [0 , enginePower],
To implement this we decided to add an if statement in incrementSpeed and decrementSpeed that checked if the new speed was in this 
interval and execute the code if true.

- calls to gas() cannot result in the speed decreasing
Since gas() uses the method incrementSpeed, 
we made an if statement in increaseSpeed that checked if the new speed was higher or equal to the current speed

- calls to brake() cannot result in the speed increasing.
Since brake() uses the method decrementSpeed, we made an if statement in decrementSpeed, 
that checked if the new speed was lower or equal to the current speed
